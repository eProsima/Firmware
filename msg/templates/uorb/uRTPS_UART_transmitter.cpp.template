@###############################################
@#
@# EmPy template for generating <msg>_uRTPS_UART.cpp file
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - msgs (List) list of all msg files
@#  - multi_topics (List) list of all multi-topic names
@###############################################
@{
import genmsg.msgs
import gencpp
from px_generate_uorb_topic_helper import * # this is in Tools/

uorb_struct = '%s_s'%spec.short_name
topic_name = spec.short_name
}@
#include <px4_config.h>
#include <px4_tasks.h>
#include <px4_posix.h>
#include <unistd.h>
#include <stdio.h>
#include <poll.h>
#include <string.h>
#include <termios.h>

#include <microcdr/microCdr.h>
#include <uORB/uORB.h>
#include <uORB/topics/@(topic_name).h>

int uart_init(const char *uart_name, uint32_t speed);

extern "C" __EXPORT int @(topic_name)_trans_main(int argc, char *argv[]);

int @(topic_name)_trans_main(int argc, char *argv[])
{
    if (argc < 2)
    {
        errx(1, "need a serial port name as argument");
    }
    
    int serial_fd = uart_init(argv[1], 115200);

    int sub_fd = orb_subscribe(ORB_ID(@(topic_name)));
    orb_set_interval(sub_fd, 1000);
    px4_pollfd_struct_t poll_fd;
    poll_fd.fd = sub_fd;
    poll_fd.events = POLLIN;

    int error_counter = 0;

    for (int i = 0; i < 50; ++i)
    {
        int poll_ret = px4_poll(&poll_fd, 1, 1000);

        if (poll_ret == 0)
        {
            PX4_ERR("Got no data within a second");
        }
        else if (poll_ret < 0)
        {
            if (error_counter < 10 || error_counter % 50 == 0)
            {
                PX4_ERR("ERROR return value from poll(): %d", poll_ret);
            }
            ++error_counter;
        }
        else
        {
            if (poll_fd.revents & POLLIN)
            {
                /* obtained data for the first file descriptor */
                struct @(uorb_struct) data;
                /* copy raw data into local buffer */
                orb_copy(ORB_ID(@(topic_name)), sub_fd, &data);
                
                char buffer[MICROCDR_INIT_BUF_LENGTH];
                uint32_t length = 0;
                serialize_@(topic_name)(&data, buffer, &length);

                // Write serialized data trough UART
                dprintf(serial_fd, ">>>");
                for(int j=0; j < length; j++)
                {
                    dprintf(serial_fd, "%c", buffer[j]);
                }
                dprintf(serial_fd, "<<<");
            }
        }
    }

    PX4_INFO("exiting");
    close(serial_fd);
    fflush(stdout);
    return OK;
}


int uart_init(const char * uart_name, uint32_t speed)
{

    // Open a serial port
    int serial_fd = open(uart_name, O_RDWR | O_NOCTTY);

    if (serial_fd < 0)
    {
        err(1, "failed to open port: %s", uart_name);
    }

    // Try to set baud rate
    struct termios uart_config;
    int termios_state;
    // Back up the original uart configuration to restore it after exit
    if ((termios_state = tcgetattr(serial_fd, &uart_config)) < 0)
    {
        warnx("ERR GET CONF %s: %d\n", uart_name, termios_state);
        close(serial_fd);
        return -1;
    }

    // Clear ONLCR flag (which appends a CR for every LF)
    uart_config.c_oflag &= ~ONLCR;

    // USB serial is indicated by /dev/ttyACM0
    if (strcmp(uart_name, "/dev/ttyACM0") != OK && strcmp(uart_name, "/dev/ttyACM1") != OK)
    {
        // Set baud rate
        if (cfsetispeed(&uart_config, speed) < 0 || cfsetospeed(&uart_config, speed) < 0)
        {
            warnx("ERR SET BAUD %s: %d\n", uart_name, termios_state);
            close(serial_fd);
            return -1;
        }
    }

    if ((termios_state = tcsetattr(serial_fd, TCSANOW, &uart_config)) < 0)
    {
        warnx("ERR SET CONF %s\n", uart_name);
        close(serial_fd);
        return -1;
    }
    
    return serial_fd;
}
