@###############################################
@#
@# EmPy template for generating RtpsTopics.h file
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - msgs (List) list of all msg files
@###############################################
@{
import genmsg.msgs
import gencpp
from px_generate_uorb_topic_helper import * # this is in Tools/
from px_generate_uorb_topic_files import MsgScope # this is in Tools/
from message_id import * # this is in Tools/

topic_names = [single_spec.short_name for single_spec in spec]
send_topics = [s.short_name for idx, s in enumerate(spec) if scope[idx] == MsgScope.SEND]
recv_topics = [s.short_name for idx, s in enumerate(spec) if scope[idx] == MsgScope.RECEIVE]
}@
#include <fastcdr/Cdr.h>

@[for topic in send_topics]@
#include "@(topic)_Publisher.h"
@[end for]@
@[for topic in recv_topics]@
#include "@(topic)_Subscriber.h"
@[end for]@

class RtpsTopics {
public:
    bool init();
@[if send_topics]@
    void publish(char topic_ID, char data_buffer[], size_t len);
@[end if]@
@[if recv_topics]@
    bool hasMsg(char *topic_ID);
    bool getMsg(const char topic_ID, eprosima::fastcdr::Cdr &scdr);
@[end if]@

private:
@[if send_topics]@
    // Publishers
@[for topic in send_topics]@
    @(topic)_Publisher _@(topic)_pub;
@[end for]@
@[end if]@

@[if recv_topics]@
    // Subscribers
@[for topic in recv_topics]@
    @(topic)_Subscriber _@(topic)_sub;
@[end for]@

    unsigned _next_sub_idx = 0;
    char _sub_topics[@(len(recv_topics))] = {
@[for topic in recv_topics]@
        @(message_id(topic)), // @(topic)
@[end for]@
    };
@[end if]@
};
