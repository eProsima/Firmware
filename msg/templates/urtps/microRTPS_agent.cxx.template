@###############################################
@#
@# EmPy template for generating <msg>_uRTPS_UART.cpp file
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - msgs (List) list of all msg files
@#  - multi_topics (List) list of all multi-topic names
@###############################################
@{
import genmsg.msgs
import gencpp
from px_generate_uorb_topic_helper import * # this is in Tools/
from px_generate_uorb_topic_files import MsgScope # this is in Tools/
from message_id import * # this is in Tools/

topic_names = [single_spec.short_name for single_spec in spec]
send_topics = [s.short_name for idx, s in enumerate(spec) if scope[idx] == MsgScope.SEND]
recv_topics = [s.short_name for idx, s in enumerate(spec) if scope[idx] == MsgScope.RECEIVE]
}@
// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file sensor_combined_PubSubMain.cpp
 * This file acts as a main entry point to the application.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include "UART_node.h"
#include "RtpsTopics.h"

#include <fastcdr/Cdr.h>
#include <fastcdr/FastCdr.h>
#include <fastcdr/exceptions/Exception.h>
#include <fastrtps/utils/eClock.h>
#include <fastrtps/Domain.h>

#include <unistd.h>

#define BUFFER_SIZE 1024
#define USLEEP_MS 0

using namespace eprosima;
using namespace eprosima::fastrtps;

int main(int argc, char** argv)
{
    UART_node m_uartNode;
    RtpsTopics topics;
    std::string uart_dev = "/dev/ttyACM0";
    uint32_t baud = 460800;
    if (argc > 1) uart_dev = std::string(argv[1]);
    if (argc > 2) baud = atoi(argv[1]);
    if (m_uartNode.init_uart(uart_dev.c_str(), baud) < 0)
    {
        printf("EXITING...\n");
        return -1;
    }

    int usleep_ms = USLEEP_MS;
    if (argc > 2) usleep_ms = atoi(argv[2]);

    char data_buffer[BUFFER_SIZE] = {};
    int received = 0, sent = 0, wait = 0, total_read = 0;

    topics.init();
@[if send_topics]@
    int read = 0;
    char topic_ID = 255;
@[end if]@
    struct timespec begin;
    bool receiving = false;
    do
    {
@[if send_topics]@
        if (!receiving)
        {
            clock_gettime(0, &begin);
        }
        // Publish messages received from UART
        while (0 < (read = m_uartNode.readFromUART(&topic_ID, data_buffer, BUFFER_SIZE)))
        {
            topics.publish(topic_ID, data_buffer, sizeof(data_buffer));
            ++received;
            total_read += read;
            receiving = true;
            wait = 0;
        }
@[end if]@
@[if recv_topics]@

        // Send subscribed topics over UART
        eprosima::fastcdr::FastBuffer cdrbuffer(data_buffer, sizeof(data_buffer));
        eprosima::fastcdr::Cdr scdr(cdrbuffer);
        while (topics.nextMsg(&topic_ID, scdr))
        {
            size_t len = scdr.getSerializedDataLength();
            //printf("[%d]>> %lu\n", topic_ID, msg.timestamp());
            m_uartNode.writeToUART(topic_ID, scdr.getBufferPointer(), len);
            ++sent;
        }
@[end if]@

        if (receiving && ++wait > 1000)
        {
            struct timespec end;
            clock_gettime(0, &end);
            double elapsed_secs = double(end.tv_sec - begin.tv_sec) + double(end.tv_nsec - begin.tv_nsec)/double(1000000000);
            printf("\nRECEIVED: %d SENT: %d\n%d bytes in %.03f seconds received %.02fKB/s\n",
                    received, sent, total_read, elapsed_secs, (double)total_read/(1000*elapsed_secs));
            received = sent = total_read = wait = 0;
            receiving = false;
        }

        usleep(usleep_ms);
    }while(true);

    return 0;
}
