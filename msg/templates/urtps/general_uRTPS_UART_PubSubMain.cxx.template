@###############################################
@#
@# EmPy template for generating <msg>_uRTPS_UART.cpp file
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - msgs (List) list of all msg files
@#  - multi_topics (List) list of all multi-topic names
@###############################################
@{
import genmsg.msgs
import gencpp
from px_generate_uorb_topic_helper import * # this is in Tools/

topic_names = [single_spec.short_name for single_spec in spec]
}@
// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file sensor_combined_PubSubMain.cpp
 * This file acts as a main entry point to the application.
 *
 * This file was generated by the tool fastcdrgen.
 */

@[for topic in topic_names]
#include "@(topic)_Publisher.h"
#include "@(topic)_Subscriber.h"
@[end for]

#include "general_uRTPS_UART_receiver.h"

#include <fastrtps/utils/eClock.h>
#include <unistd.h>

#include <fastrtps/Domain.h>

using namespace eprosima;
using namespace eprosima::fastrtps;

int main(int argc, char** argv)
{   
    general_UART_receiver m_uartReceiver;

@[for topic in topic_names]
    @(topic)_Publisher @(topic)_pub;
    @(topic)_pub.init();
@[end for]

    std::string uart = "/dev/ttyACM0";
    if (argc > 2) uart = std::string(argv[2]);
    m_uartReceiver.init_uart(std::string(uart));

    char topic_ID = 127;
    do
    {
        if (0 == m_uartReceiver.readFromUART(&topic_ID))
        {
@[for id, topic in enumerate(topic_names)]
            if (topic_ID == @(id)) {
                cout << "Published @(topic)" << endl;
                @(topic)_ st;
                m_uartReceiver.fill_@(topic)(st);
                @(topic)_pub.publish(&st);
            }
@[end for]
        }
        usleep(10000);
    }while(true);
    
    return 0;
}