@###############################################
@#
@# EmPy template for generating <msg>_uRTPS_UART.cpp file
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - msgs (List) list of all msg files
@#  - multi_topics (List) list of all multi-topic names
@###############################################
@{
import genmsg.msgs
import gencpp
from px_generate_uorb_topic_helper import * # this is in Tools/
from px_generate_uorb_topic_files import MsgScope # this is in Tools/

topic_names = [single_spec.short_name for single_spec in spec]
topic_scopes = scope
}@
#include <px4_config.h>
#include <px4_tasks.h>
#include <px4_posix.h>
#include <unistd.h>
#include <stdio.h>
#include <poll.h>
#include <string.h>
#include <termios.h>
#include <ctime>

#include <microcdr/microCdr.h>
#include <uORB/uORB.h>

#include "UART_node.h"

@[for topic in list(set(topic_names))]@
#include <uORB/topics/@(topic).h>
@[end for]@

#define BUFFER_SIZE 256
#define POLL_TIME_MS 10
#define UPDATE_TIME_MS 10
#define LOOPS 1000
#define USLEEP_MS 2000

extern "C" __EXPORT int general_trans_main(int argc, char *argv[]);
extern "C" __EXPORT double time_point(uint8_t id, struct timespec &pre);

int general_trans_main(int argc, char *argv[])
{
    int update_time = UPDATE_TIME_MS;
    if (argc > 1) update_time = atoi(argv[1]);

    int poll_time = POLL_TIME_MS;
    if (argc > 2) poll_time = atoi(argv[2]);

    int loops = LOOPS;
    if (argc > 3) loops = atoi(argv[3]);

    int usleep_ms = USLEEP_MS;
    if (argc > 4) usleep_ms = atoi(argv[4]);

    printf("update: %dms poll: %dms loops: %d usleep_ms: %d\n", update_time, poll_time, loops, usleep_ms);
    usleep(2000000);

    UART_node m_uartNode;
    if (0 != m_uartNode.init_uart("/dev/ttyACM0"))
    {
        printf("ERROR UART INIT, EXITING...\n");
        return -1;
    }

    char data_buffer[BUFFER_SIZE] = {};
@[if (MsgScope.RECEIVE in topic_scopes)]@
    char rx_buffer[BUFFER_SIZE] = {};
    uint32_t rx_buff_pos = 0u;
@[end if]@

    /* subscribe to topics */
@[if (MsgScope.SEND in topic_scopes)]@
    px4_pollfd_struct_t fds[@(topic_scopes.count(MsgScope.SEND))];
@[end if]@


    // orb_set_interval statblish an update interval period in milliseconds.
@[for id, topic in enumerate(topic_names)]@
    @[if (topic_scopes[id] == MsgScope.SEND)]@

    fds[@(id)].fd = orb_subscribe(ORB_ID(@(topic)));
    orb_set_interval(fds[@(id)].fd, update_time);
    fds[@(id)].events = POLLIN;
    @[end if]@
@[end for]@

    /* advertise topics */
@[for id, topic in enumerate(topic_names)]@
    @[if (topic_scopes[id] == MsgScope.RECEIVE)]@

    struct @(topic)_s @(topic)_data;
    memset(&@(topic)_data, 0, sizeof(@(topic)_data));
    orb_advert_t @(topic)_pub = orb_advertise(ORB_ID(@(topic)), &@(topic)_data);
    @[end if]@
@[end for]

    // microBuffer to serialized and deserialized using the user defined buffer
    struct microBuffer microBufferWriter, microBufferReader;
    initStaticAlignedBuffer(data_buffer, BUFFER_SIZE, &microBufferWriter);
    initDeserializedAlignedBuffer(data_buffer, BUFFER_SIZE, &microBufferReader);

    // microCDR structs for managing the microBuffers
    struct microCDR microCDRWriter, microCDRReader;
    initMicroCDR(&microCDRWriter, &microBufferWriter);
    initMicroCDR(&microCDRReader, &microBufferReader);

@[if (MsgScope.SEND in topic_scopes)]@
    int error_counter = 0;
    uint32_t length = 0;
@[end if]@
    uint64_t total_lenght = 0;
    uint32_t received = 0, sent = 0;

    struct timespec begin;
    clock_gettime(0, &begin);
    int i = 0;
    for (i = 0; i < loops; ++i)
    {
@[if (MsgScope.SEND in topic_scopes)]@
        int poll_ret = px4_poll(fds, @(topic_scopes.count(MsgScope.SEND)), poll_time);

        if (poll_ret == 0)
        {
            //PX4_ERR("Got no data within a second");
        }
        else if (poll_ret < 0)
        {
            if (error_counter < 10 || error_counter % 50 == 0)
            {
                //PX4_ERR("ERROR return value from poll(): %d", poll_ret);
            }
            ++error_counter;
        }
        else
        {
    @[for id, topic in enumerate(topic_names)]@
        @[if (topic_scopes[id] == MsgScope.SEND)]@

            if (fds[@(id)].revents & POLLIN)
            {
                // obtained data for the file descriptor
                struct @(topic)_s data;
                // copy raw data into local buffer
                orb_copy(ORB_ID(@(topic)), fds[@(id)].fd, &data);
                serialize_@(topic)(&data, data_buffer, &length, &microCDRWriter);
                m_uartNode.writeToUART((char)@(id), data_buffer, length);
                //printf("[%d]>> %llu\n", @(id), data.timestamp);
                ++sent;
                total_lenght += (length + 7);
            }
        @[end if]@
    @[end for]@

        }
@[end if]@


        usleep(usleep_ms);
@[if (MsgScope.RECEIVE in topic_scopes)]@
        char topic_ID = 255;
        while (0 < m_uartNode.readFromUART(&topic_ID, data_buffer, rx_buffer, rx_buff_pos))
        {
            switch (topic_ID)
            {
    @[for id, topic in enumerate(topic_names)]@
        @[if (topic_scopes[id] == MsgScope.RECEIVE)]@

                case @(id):
                    deserialize_@(topic)(&@(topic)_data, data_buffer, &microCDRReader);
                    orb_publish(ORB_ID(@(topic)), @(topic)_pub, &@(topic)_data);
                    //printf("                >>[%d] %llu\n", @(id), @(topic)_data.timestamp);
                    ++received;
                break;
        @[end if]@
    @[end for]@

            }
        }
@[end if]@
    }

    struct timespec end;
    clock_gettime(0, &end);
    double elapsed_secs2 = double(end.tv_sec - begin.tv_sec) + double(end.tv_nsec - begin.tv_nsec)/double(1000000000);
    printf("\nSENT: %d RECEIVED: %d in %d LOOPS\n%llu bytes in %.03f seconds sent %.02fKB/s\n",
            sent, received, i, total_lenght, elapsed_secs2, (double)total_lenght/(1000*elapsed_secs2));

    PX4_INFO("exiting");
    fflush(stdout);
    return 0;
}

double time_point(uint8_t id, struct timespec &pre)
{
    struct timespec now;
    clock_gettime(0, &now);
    double t = 1000*(now.tv_sec - pre.tv_sec) + (now.tv_nsec - pre.tv_nsec)/1000000;
    printf("                                                            %hhu: %03f\n", id, t);
    pre = now;
    return t;
}
