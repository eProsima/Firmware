@###############################################
@#
@# EmPy template for generating <msg>_uRTPS_UART.cpp file
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - msgs (List) list of all msg files
@#  - multi_topics (List) list of all multi-topic names
@###############################################
@{
import genmsg.msgs
import gencpp
from px_generate_uorb_topic_helper import * # this is in Tools/

topic_names = [single_spec.short_name for single_spec in spec]
num_topics = len(topic_names)
}@
#include <px4_config.h>
#include <px4_tasks.h>
#include <px4_posix.h>
#include <unistd.h>
#include <stdio.h>
#include <poll.h>
#include <string.h>
#include <termios.h>


#include <microcdr/microCdr.h>
#include <uORB/uORB.h>

#include "UART_node.h"


@[for topic in topic_names]
#include <uORB/topics/@(topic).h>
@[end for]

#define BUFFER_SIZE 256

extern "C" __EXPORT int general_trans_main(int argc, char *argv[]);

int general_trans_main(int argc, char *argv[])
{
    UART_node m_uartNode;
    if (argc < 2) m_uartNode.init_uart("/dev/ttyACM0");
    else          m_uartNode.init_uart(argv[1]);
    char data_buffer[BUFFER_SIZE] = {};
    char rx_buffer[BUFFER_SIZE] = {};
    uint32_t rx_buff_pos = 0u;

    /* subscribe to topics */
    px4_pollfd_struct_t fds[@(num_topics)];

    // orb_set_interval statblish an update interval period in milliseconds.
@[for id, topic in enumerate(topic_names)]
    fds[@(id)].fd = orb_subscribe(ORB_ID(@(topic)));
    orb_set_interval(fds[@(id)].fd, 1000);
    fds[@(id)].events = POLLIN;
@[end for]

    /* advertise topics */
@[for id, topic in enumerate(topic_names)]
    struct @(topic)_s @(topic)_data;
    //memset(&@(topic)_data, 0, sizeof(@(topic)_data));
    //orb_advert_t @(topic)_pub = orb_advertise(ORB_ID(@(topic)), &@(topic)_data);
@[end for]

    // microBuffer to serialized and deserialized using the user defined buffer
    struct microBuffer microBufferWriter, microBufferReader;
    initStaticAlignedBuffer(data_buffer, BUFFER_SIZE, &microBufferWriter);
    initDeserializedAlignedBuffer(data_buffer, BUFFER_SIZE, &microBufferReader);
    
    // microCDR structs for managing the microBuffers
    struct microCDR microCDRWriter, microCDRReader;
    initMicroCDR(&microCDRWriter, &microBufferWriter);
    initMicroCDR(&microCDRReader, &microBufferReader);

    int error_counter = 0;
    uint32_t length = 0;
    uint32_t received = 0, sent = 0;

    for (int i = 0; i < 50; ++i)
    {
        int poll_ret = px4_poll(fds, @(num_topics), 1000);

        if (poll_ret == 0)
        {
            PX4_ERR("Got no data within a second");
        }
        else if (poll_ret < 0)
        {
            if (error_counter < 10 || error_counter % 50 == 0)
            {
                PX4_ERR("ERROR return value from poll(): %d", poll_ret);
            }
            ++error_counter;
        }
        else
        {
@[for id, topic in enumerate(topic_names)]
            if (fds[@(id)].revents & POLLIN)
            {
                // obtained data for the file descriptor
                struct @(topic)_s data;
                // copy raw data into local buffer
                orb_copy(ORB_ID(@(topic)), fds[@(id)].fd, &data);
                serialize_@(topic)(&data, data_buffer, &length, &microCDRWriter);
                m_uartNode.writeToUART((char)@(id), data_buffer, length);
                printf("[%d]>> %llu\n", @(id), data.timestamp);
                ++sent;
            }
@[end for]
        }

        char topic_ID = 255;
        if (0 != m_uartNode.readFromUART(&topic_ID, data_buffer, rx_buffer, rx_buff_pos))
        {
            switch (topic_ID)
            {
@[for id, topic in enumerate(topic_names)]
                case @(id):
                    deserialize_@(topic)(&@(topic)_data, data_buffer, &microCDRReader);
                    //orb_publish(ORB_ID(@(topic)), @(topic)_pub, &@(topic)_data);
                    printf("# >>[%d] %llu\n", @(id), @(topic)_data.timestamp);
                    ++received;
                break;
@[end for]
            }
        }
        usleep(1000);
    }
    
    printf("\nSENT: %d RECEIVED: %d\n", sent, received);
    PX4_INFO("exiting");
    fflush(stdout);
    return OK;
}