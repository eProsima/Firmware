@###############################################
@#
@# EmPy template for generating <msg>_uRTPS_UART.cpp file
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - msgs (List) list of all msg files
@#  - multi_topics (List) list of all multi-topic names
@###############################################
@{
import genmsg.msgs
import gencpp
from px_generate_uorb_topic_helper import * # this is in Tools/
from px_generate_uorb_topic_files import MsgScope # this is in Tools/
from message_id import * # this is in Tools/

topic_names = [single_spec.short_name for single_spec in spec]
send_topics = [s.short_name for idx, s in enumerate(spec) if scope[idx] == MsgScope.SEND]
recv_topics = [s.short_name for idx, s in enumerate(spec) if scope[idx] == MsgScope.RECEIVE]

}@
#include <px4_config.h>
#include <px4_tasks.h>
#include <px4_posix.h>
#include <unistd.h>
#include <stdio.h>
#include <poll.h>
#include <string.h>
#include <termios.h>
#include <ctime>

#include <microcdr/microCdr.h>
#include <uORB/uORB.h>

#include "UART_node.h"

@[for topic in list(set(topic_names))]@
#include <uORB/topics/@(topic).h>
@[end for]@

#define BUFFER_SIZE 1024
#define POLL_TIME_MS 0
#define UPDATE_TIME_MS 0
#define LOOPS 10000
#define USLEEP_MS 0
#define BAUDRATE 460800
#define DEVICE "/dev/ttyACM0"

extern "C" __EXPORT int micrortps_client_main(int argc, char *argv[]);

int micrortps_client_main(int argc, char *argv[])
{
    // TODO use proper options with getopt here
    const char *device = DEVICE;
    if (argc > 1) device = argv[1];

    int update_time = UPDATE_TIME_MS;
    if (argc > 2) update_time = atoi(argv[2]);

    int poll_time = POLL_TIME_MS;
    if (argc > 3) poll_time = atoi(argv[3]);

    int loops = LOOPS;
    if (argc > 4) loops = atoi(argv[4]);

    int usleep_ms = USLEEP_MS;
    if (argc > 5) usleep_ms = atoi(argv[5]);

    uint32_t baudrate = BAUDRATE;
    if (argc > 6) baudrate = atoi(argv[6]);

    printf("device: %s update: %dms poll: %dms loops: %d usleep_ms: %d baudrate: %d\n", device, update_time, poll_time, loops, usleep_ms, baudrate);
    usleep(2000000);

    UART_node m_uartNode;
    if (0 != m_uartNode.init_uart(device, baudrate))
    {
        printf("ERROR UART INIT, EXITING...\n");
        return -1;
    }

    char data_buffer[BUFFER_SIZE] = {};
@[if send_topics]@

    /* subscribe to topics */
    px4_pollfd_struct_t fds[@(len(send_topics))];

    // orb_set_interval statblish an update interval period in milliseconds.
@[for idx, topic in enumerate(send_topics)]@
    fds[@(idx)].fd = orb_subscribe(ORB_ID(@(topic)));
    orb_set_interval(fds[@(idx)].fd, update_time);
    fds[@(idx)].events = POLLIN;
@[end for]@
@[end if]@
@[if recv_topics]@

    /* advertise topics */
@[for topic in recv_topics]@
    struct @(topic)_s @(topic)_data;
    memset(&@(topic)_data, 0, sizeof(@(topic)_data));
    orb_advert_t @(topic)_pub = orb_advertise(ORB_ID(@(topic)), &@(topic)_data);
@[end for]@
@[end if]@
@[if send_topics]@

    // microBuffer to serialized using the user defined buffer
    struct microBuffer microBufferWriter;
    initStaticAlignedBuffer(data_buffer, BUFFER_SIZE, &microBufferWriter);
    // microCDR structs for managing the microBuffer
    struct microCDR microCDRWriter;
    initMicroCDR(&microCDRWriter, &microBufferWriter);
@[end if]@
@[if recv_topics]@

    // microBuffer to deserialized using the user defined buffer
    struct microBuffer microBufferReader;
    initDeserializedAlignedBuffer(data_buffer, BUFFER_SIZE, &microBufferReader);
    // microCDR structs for managing the microBuffer
    struct microCDR microCDRReader;
    initMicroCDR(&microCDRReader, &microBufferReader);
@[end if]@

@[if send_topics]@
    int error_counter = 0;
    uint32_t length = 0;
    uint8_t seq = 0;
@[end if]@
    uint32_t sent = 0, received = 0;
    uint64_t total_send_lenght = 0;

    struct timespec begin;
    clock_gettime(0, &begin);
    int i = 0;
    for (i = 0; i < loops; ++i)
    {
@[if send_topics]@
        int poll_ret = px4_poll(fds, @(len(send_topics)), poll_time);

        if (poll_ret < 0)
        {
            ++error_counter;
        }
        else
        {
@[for idx, topic in enumerate(send_topics)]@
            if (fds[@(idx)].revents & POLLIN)
            {
                // obtained data for the file descriptor
                struct @(topic)_s data;
                // copy raw data into local buffer
                orb_copy(ORB_ID(@(topic)), fds[@(idx)].fd, &data);
                serialize_@(topic)(&data, data_buffer, &length, &microCDRWriter);
                m_uartNode.writeToUART((char)@(message_id(topic)), data_buffer, length, seq++);
                //printf("[%d]>> %llu\n", @(message_id(topic)), data.timestamp);
                ++sent;
                total_send_lenght += (length + 9);
            }
@[end for]@
        }
@[end if]@

        usleep(usleep_ms);
@[if recv_topics]@
        char topic_ID = 255;
        while (0 < m_uartNode.readFromUART(&topic_ID, data_buffer, BUFFER_SIZE))
        {
            switch (topic_ID)
            {
@[for topic in recv_topics]@
                case @(message_id(topic)):
                    deserialize_@(topic)(&@(topic)_data, data_buffer, &microCDRReader);
                    orb_publish(ORB_ID(@(topic)), @(topic)_pub, &@(topic)_data);
                    //printf("                >>[%d] %llu\n", @(message_id(topic)), @(topic)_data.timestamp);
                    ++received;
                break;
@[end for]@
            }
        }
@[end if]@
    }

    struct timespec end;
    clock_gettime(0, &end);
    double elapsed_secs2 = double(end.tv_sec - begin.tv_sec) + double(end.tv_nsec - begin.tv_nsec)/double(1000000000);
    printf("\nSENT: %d RECEIVED: %d in %d LOOPS\n%llu bytes in %.03f seconds sent %.02fKB/s\n",
            sent, received, i, total_send_lenght, elapsed_secs2, (double)total_send_lenght/(1000*elapsed_secs2));

    PX4_INFO("exiting");
    fflush(stdout);
    return 0;
}